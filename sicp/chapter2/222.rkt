#lang sicp

#|
  Упражнение 2.22

  Хьюго Дум пытается переписать первую из процедур square-list из упражнения 2.21 так, чтобы она
  работала как итеративный процесс:

    (define (square-list items)
      (define (iter things answer)
        (if (null? things)
            answer
            (iter (cdr things)
                  (cons (square (car things))
                        answer))))
      (iter items nil))

  К сожалению, такое определение square-list выдает список результатов в порядке, обратном желаемому.
  Почему?

  Затем Хьюго пытается исправить ошибку, обменяв аргументы cons:

    (define (square-list items)
      (define (iter things answer)
        (if (null? things)
            answer
            (iter (cdr things)
                  (cons answer
                        (square (car things))))))
      (iter items nil))

  И так программа тоже не работает. Объясните это.
|#

#|
  В первой версии процедуры square-list мы получаем перевёрнутый список, потому что на каждой итерации
  новый элемент добавляется в начало пары, а на следующей итерации эта пара становится вторым элементом
  следующей пары (cdr пары или головой хвоста формируемого списка):

    (square-list (1 2 3)) => ... =>
    => (iter (1 2 3) ()) => ... =>
    => (iter (2 3) (cons 1 ())=> ... =>
    => (iter (3) (cons 4 (1)) => ... =>
    => (iter () (cons 9 (4 1)) =>
    => (9 4 1)

  Это не срабатывает во второй версии процедуры по той причине, что в качестве первого аргумента
  передаётся не значение, а список, который был составлен на предыдущих этапах итерации, соответственно,
  мы получаем нечто вида:

    (square-list (1 2 3)) => ... =>
    => (iter (1 2 3) ()) => ... =>
    => (iter (2 3) (cons () 1) => ... =>
    => (iter (3) (cons (() 1) 4) => ... =>
    => (iter () (cons  ((() 1) 4) 9) =>
    => ((() 1) 4) 9)
|#
