#lang racket

#|
  Упражнение 3.68

  Хьюго Дум считает, что построение потока пар из трех частей — процедура слишком сложная. Он предлагает
  вместо того, чтобы отделять пару (S₀, T₀), работать с первой строкой целиком:

    (define (pairs s t)
      (interleave
        (stream-map (lambda (x) (list (stream-car s) x))
                    t)
        (pairs (stream-cdr s) (stream-cdr t))))

  Будет ли такой код работать? Посмотрите, что произойдет, если мы попытаемся вычислить (pairs integers integers),
  используя определение Хьюго.
|#

#|
  Такой код не будет работать, т.к. зациклится. Почему это произойдёт? Потому что мы убрали особую форму
  stream-cons и interleave будет вычисляться не отложенно, а сразу после вызова pairs (и вычисления её
  аргументов). Это приведёт к вычислению аргументов interleave, а второй аргумент содержит рекурсивный
  вызов pairs и у цепочки вызовов второго аргумента нет условия останова (роль этого условия выполняла
  отложенность вычислений).
|#
