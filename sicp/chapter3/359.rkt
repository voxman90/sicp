#lang racket

#|
  ะฃะฟัะฐะถะฝะตะฝะธะต 3.59

  ะ ัะฐะทะดะตะปะต 2.5.3 ะผั ัะฒะธะดะตะปะธ, ะบะฐะบ ัะตะฐะปะธะทะพะฒะฐัั ัะธััะตะผั ะฐัะธัะผะตัะธะบะธ ะผะฝะพะณะพัะปะตะฝะพะฒ, ะธัะฟะพะปัะทัั ะฟัะตะดััะฐะฒะปะตะฝะธะต
  ะผะฝะพะณะพัะปะตะฝะพะฒ ะฒ ะฒะธะดะต ัะฟะธัะบะฐ ัะตัะผะพะฒ. ะะพะดะพะฑะฝัะผ ะถะต ะพะฑัะฐะทะพะผ ะผะพะถะฝะพ ัะฐะฑะพัะฐัั ัะพ ััะตะฟะตะฝะฝัะผะธ ััะดะฐะผะธ (power series),
  ะฝะฐะฟัะธะผะตั

    eหฃ = 1 + ๐ฅ + ๐ฅยฒ/2 + ๐ฅยณ/(2ยท3) + ๐ฅโด/(2ยท3ยท4) + ยทยทยท,

    cos ๐ฅ = 1 - ๐ฅยฒ/2 + ๐ฅโด/(2ยท3ยท4) - ยทยทยท,

    sin ๐ฅ = ๐ฅ - ๐ฅยณ/(2ยท3) + ๐ฅโต/(2ยท3ยท4ยท5) - ยทยทยท,

  ะฟัะตะดััะฐะฒะปะตะฝะฝัะผะธ ะฒ ะฒะธะดะต ะฑะตัะบะพะฝะตัะฝัั ะฟะพัะพะบะพะฒ. ะัะดะตะผ ะฟัะตะดััะฐะฒะปััั ะฟะพัะปะตะดะพะฒะฐัะตะปัะฝะพััั ๐โ + ๐โ๐ฅ + ๐โ๐ฅยฒ +
  ๐โ๐ฅยณ + ยทยทยท ะบะฐะบ ะฟะพัะพะบ, ัะปะตะผะตะฝัะฐะผะธ ะบะพัะพัะพะณะพ ัะฒะปััััั ะบะพัััะธัะธะตะฝัั ๐โ, ๐โ, ๐โ, ๐โ, ... .

  ะฐ. ะะฝัะตะณัะฐะป ะฟะพัะปะตะดะพะฒะฐัะตะปัะฝะพััะธ ๐โ + ๐โ๐ฅ + ๐โ๐ฅยฒ + ๐โ๐ฅยณ + ยทยทยท ะตััั ะฟะพัะปะตะดะพะฒะฐัะตะปัะฝะพััั

    ๐ + ๐โ๐ฅ + ๐โ๐ฅยฒ/2 + ๐โ๐ฅยณ/3 + ๐โ๐ฅโด/4 + ยทยทยท

  ะณะดะต c โ ะฟัะพะธะทะฒะพะปัะฝะฐั ะบะพะฝััะฐะฝัะฐ. ะะฟัะตะดะตะปะธัะต ะฟัะพัะตะดััั integrate-series, ะบะพัะพัะฐั ะฝะฐ ะฒัะพะดะต ะฟัะธะฝะธะผะฐะตั ะฟะพัะพะบ
  ๐โ, ๐โ, ๐โ, ... , ะฟัะตะดััะฐะฒะปััััั ััะตะฟะตะฝะฝะพะน ััะด, ะธ ะฒะพะทะฒัะฐัะฐะตั ะฟะพัะพะบ ๐โ, ๐โ/2, ๐โ/3, ... ะบะพัััะธัะธะตะฝัะพะฒ
  ะฟัะธ ะฝะตะบะพะฝััะฐะฝัะฝัั ัะปะตะฝะฐั ะธะฝัะตะณัะฐะปะฐ ะฟะพัะปะตะดะพะฒะฐัะตะปัะฝะพััะธ. (ะะพัะบะพะปัะบั ะฒ ัะตะทัะปััะฐัะต ะพััััััะฒัะตั ะฟะพััะพัะฝะฝัะน
  ัะปะตะฝ, ะพะฝ ะฝะต ะฟัะตะดััะฐะฒะปัะตั ัะพะฑะพะน ััะตะฟะตะฝะฝะพะน ััะด; ะฟัะธ ะธัะฟะพะปัะทะพะฒะฐะฝะธะธ integrate-series ะผั ัะตัะตะท cons ะฑัะดะตะผ
  ะฟัะธัะพะตะดะธะฝััั ะบ ะฝะฐัะฐะปั ัะพะพัะฒะตัััะฒััััั ะบะพะฝััะฐะฝัั.)

  ะฑ. ะคัะฝะบัะธั ๐ฅ โ eหฃ ัะฐะฒะฝะฐ ัะฒะพะตะน ัะพะฑััะฒะตะฝะฝะพะน ะฟัะพะธะทะฒะพะดะฝะพะน. ะัััะดะฐ ัะปะตะดัะตั, ััะพ eหฃ ะธ ะธะฝัะตะณัะฐะป eหฃ ัััั ะพะดะฝะฐ
  ะธ ัะฐ ะถะต ะฟะพัะปะตะดะพะฒะฐัะตะปัะฝะพััั, ั ัะพัะฝะพัััั ะดะพ ะฟะพััะพัะฝะฝะพะณะพ ัะปะตะฝะฐ, ะบะพัะพััะน ัะฐะฒะตะฝ eโฐ = 1. ะกะพะพัะฒะตัััะฒะตะฝะฝะพ,
  ะผะพะถะฝะพ ะฟะพัะพะดะธัั ะฟะพัะปะตะดะพะฒะฐัะตะปัะฝะพััั ะดะปั eหฃ ัะตัะตะท

    (define exp-series
      (cons-stream 1 (integrate-series exp-series)))

  ะะพะบะฐะถะธัะต, ะบะฐะบ ะฟะพัะพะดะธัั ะฟะพัะปะตะดะพะฒะฐัะตะปัะฝะพััะธ ะดะปั ัะธะฝััะฐ ะธ ะบะพัะธะฝััะฐ, ะพะฟะธัะฐััั ะฝะฐ ัะพ, ััะพ ะฟัะพะธะทะฒะพะดะฝะฐั ัะธะฝััะฐ
  ัะฐะฒะฝะฐ ะบะพัะธะฝััั, ะฐ ะฟัะพะธะทะฒะพะดะฝะฐั ะบะพัะธะฝััะฐ ัะฐะฒะฝะฐ ะผะธะฝัั ัะธะฝััั:

    (define cosine-series
      (cons-stream 1 <??>))
    (define sine-series
      (cons-stream 0 <??>))
|#

(#%require rackunit
           racket/stream)

(define the-empty-stream empty-stream)

(define (stream-null? stream) (stream-empty? stream))

(define (stream-car stream) (stream-first stream))

(define (stream-cdr stream) (stream-rest stream))

(define (stream-map proc . argstreams)
  (if (stream-null? (car argstreams))
      the-empty-stream
      (stream-cons
       (apply proc (map stream-car argstreams))
       (apply stream-map
              (cons proc (map stream-cdr argstreams))))))

(define (add-streams stream1 stream2)
  (stream-map + stream1 stream2))

(define (display-line x out)
  (newline out)
  (display x out))

(define (display-stream stream out n)
  (when (not (<= n 0))
        (display-line (stream-car stream) out)
        (display-stream (stream-cdr stream) out (- n 1))))

(define ones (stream-cons 1 ones))

(define integers (stream-cons 1 (add-streams ones integers)))

(define (integrate-series coeff-stream)
  (define (rec stream int)
    (stream-cons (/ (stream-car stream) (stream-car int))
                 (rec (stream-cdr stream) (stream-cdr int))))

  (rec coeff-stream integers))

(define exp-series
  (stream-cons 1 (integrate-series exp-series)))

(define (scale-stream stream factor)
  (stream-map (lambda (x) (* x factor)) stream))

(define cosine-series
  (stream-cons 1 (integrate-series (scale-stream sine-series -1))))

(define sine-series
  (stream-cons 0 (integrate-series cosine-series)))

(define output1 (open-output-string))

(display-stream cosine-series output1 8)

(check-equal? (get-output-string output1) "\n1\n0\n-1/2\n0\n1/24\n0\n-1/720\n0")

(close-output-port output1)

(define output2 (open-output-string))

(display-stream sine-series output2 8)

(check-equal? (get-output-string output2) "\n0\n1\n0\n-1/6\n0\n1/120\n0\n-1/5040")

(close-output-port output2)
