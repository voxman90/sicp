#lang sicp

#|
  Упражнение 3.41

  Бен Битобор считает, что лучше было бы реализовать банковский счет таким образом (измененная строка
  отмечена комментарием):

    (define (make-account balance)
      (define (withdraw amount)
        (if (>= balance amount)
            (begin (set! balance (- balance amount))
                   balance)
            "Insufficient funds"))
      (define (deposit amount)
        (set! balance (+ balance amount))
        balance)
      (let ((protected (make-serializer)))
        (define (dispatch m)
          (cond ((eq? m 'withdraw) (protected withdraw))
                ((eq? m 'deposit) (protected deposit))
                ((eq? m 'balance)
                 ((protected (lambda () balance)))); serialized
                (else (error "Unknown request -- MAKE-ACCOUNT"
                             m))))
        dispatch))

  поскольку несериализованный доступ к банковскому счету может привести к неправильному поведению. Вы
  согласны? Существует ли сценарий, который демонстрирует обоснованность беспокойства Бена?
|#

#|
  Сериализация запроса значения переменной balance через dispatch не повлияет на поведение процедур,
  которые обращаются (и изменяют) эту переменную напрямую. Более того, этот запрос не изменяет состояние
  balance, так что не влияет на поведение процедур withdraw и deposit даже без сериализации.

  Но, быть может, обращение к balance во время работы процедур withdraw или deposit может привести к
  некорректному отображению баланса?

  Если обращение к балансу через диспетчеризатор сериализованно, то баланс возвращается в состоянии до
  или после работы этих процедур. Но точно такое же поведение демонстрирует и несериализованная версия,
  т.к. внутри withdraw и deposit значение balance меняется однократно и в завершённой форме (т.е. в
  переменную balance не попадают "промежуточные" рассчёты).

  Не существует сценария, который бы обосновал необходимость сериализации запроса на отображение баланса
  через диспетчеризатор (для этой конкретной реализации счёта).
|#
