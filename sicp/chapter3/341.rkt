#lang sicp

#|
  Упражнение 3.41

  Бен Битобор считает, что лучше было бы реализовать банковский счет таким образом (измененная строка
  отмечена комментарием):

    (define (make-account balance)
      (define (withdraw amount)
        (if (>= balance amount)
            (begin (set! balance (- balance amount))
                   balance)
            "Insufficient funds"))
      (define (deposit amount)
        (set! balance (+ balance amount))
        balance)
      (let ((protected (make-serializer)))
        (define (dispatch m)
          (cond ((eq? m 'withdraw) (protected withdraw))
                ((eq? m 'deposit) (protected deposit))
                ((eq? m 'balance)
                 ((protected (lambda () balance)))); serialized
                (else (error "Unknown request -- MAKE-ACCOUNT"
                             m))))
        dispatch))

  поскольку несериализованный доступ к банковскому счету может привести к неправильному поведению. Вы
  согласны? Существует ли сценарий, который демонстрирует обоснованность беспокойства Бена?
|#

#|
  Процедуры снятия со счёта и пополнения счёта не зависят от сериализованности доступа к balance через
  dispatch, так как получают доступ напрямую, как к внутреннему состоянию объекта, методами которого
  они являются. А обращение к счёту через dispatch не изменяет dispatch.

  Т.е. речь не идёт о том, что обращение к balance через dispatch может повлиять на поведение процедур,
  которые изменяют внутренние свойства объекта.

  Но, быть может, обращение к balance во время работы процедур withdraw или deposit может привести к
  отображению неправильного баланса?

  Если обращение к балансу через диспетчеризатор сериализованно, то баланс возвращает до или после
  работы этих процедур. Но точно такое же поведение демонстрирует и несериализованная версия, т.к.
  внутри withdraw и deposit имеется одно единственное присваивание значения переменной состояния balance.

  Не существует сценария, который бы обосновал необходимость сериализации доступа к значению баланса через
  диспетчеризатор (для этой конкретной реализации счёта).
|#
